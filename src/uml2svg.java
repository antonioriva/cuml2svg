/* Generated By:JavaCC: Do not edit this line. uml2svg.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;
public class uml2svg implements uml2svgConstants {
  public static void main(String args[]) throws ParseException {
      try {
         uml2svg parser = new uml2svg(new FileInputStream("doc/esempi/visitor"));
        parser.s();

      } catch (FileNotFoundException e1) {
                e1.printStackTrace();
    }catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
      }
      catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }

}

////////////////////////////////////////////////////////////////
//S → diagram DIAGRAM_TYPE diagram_name { PACKAGE_DEFINITIONS }
  static final public void s() throws ParseException {
    jj_consume_token(DIAGRAM);
    diagram_type();
    jj_consume_token(DIAGRAM_NAME);
    jj_consume_token(5);
    package_definitions();
    jj_consume_token(6);
  }

////////////////////
//DIAGRAM_TYPE → uml
  static final public void diagram_type() throws ParseException {
    jj_consume_token(DIAGRAM_TYPE);
  }

////////////////////////////////////////////////////////////////
//PACKAGE_DEFINITIONS → PACKAGE_DEFINITION PACKAGE_DEFINITIONS
//PACKAGE_DEFINITIONS → ε
  static final public void package_definitions() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      package_definition();
      package_definitions();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

///////////////////////////////////////////////////////////////////
//PACKAGE_DEFINITION → package package_name { CLASS_DEFINITIONS }
  static final public void package_definition() throws ParseException {
    jj_consume_token(PACKAGE);
    package_name();
    jj_consume_token(5);
    class_definitions();
    jj_consume_token(6);
  }

  static final public void package_name() throws ParseException {
    jj_consume_token(VARIABLE);
  }

////////////////////////////
//OPTIONAL_COMMENT → ε
//OPTIONAL_COMMENT → COMMENT
  static final public void optional_comment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
      comment();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

///////////////////
//COMMENT → comment
  static final public void comment() throws ParseException {
    jj_consume_token(COMMENT);
  }

////////////////////////////////////////////////////////////
//CLASS_DEFINITIONS → CLASS_DEFINITION CLASS_DEFINITIONS
//CLASS_DEFINITIONS → ε
  static final public void class_definitions() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
    case CLASS_TYPE:
    case VISIBILITY:
      class_definition();
      class_definitions();
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

///////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASS_DEFINITION → OPTIONAL_COMMENT VISIBILITY CLASS_TYPE class_name { RELATIONS ATTRIBUTES METHODS }
  static final public void class_definition() throws ParseException {
    optional_comment();
    visibility();
    class_type();
    class_name();
    jj_consume_token(5);
    relations();
    attributes();
    methods();
    jj_consume_token(6);
  }

  static final public void class_name() throws ParseException {
    jj_consume_token(VARIABLE);
  }

/////////////////////////////////////////////////
//RELATIONS → relations { RELATION_DEFINITIONS }
  static final public void relations() throws ParseException {
    jj_consume_token(RELATIONS);
    jj_consume_token(5);
    relation_definitions();
    jj_consume_token(6);
  }

///////////////////////////////////////////////////////////////////
//RELATIONS_DEFINITIONS → RELATION_DEFINITION RELATION_DEFINITIONS
//RELATIONS_DEFINITIONS → ε
  static final public void relation_definitions() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
    case RELATION_TYPE:
      relation_definition();
      relation_definitions();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//RELATION_DEFINITION → OPTIONAL_COMMENT RELATION_TYPE class_name RELATION_CARDINALITY CLASS_LIST_WITH_CARDINALITY
  static final public void relation_definition() throws ParseException {
    optional_comment();
    relation_type();
    class_name();
    relation_cardinality();
    class_list_with_cardinality();
  }

///////////////////////////
//RELATION_TYPE → use
//RELATION_TYPE → extend
//RELATION_TYPE → associate
//RELATION_TYPE → include
//RELATION_TYPE → composed
//RELATION_TYPE → realize
//RELATION_TYPE → depend
  static final public void relation_type() throws ParseException {
    jj_consume_token(RELATION_TYPE);
  }

/////////////////////////////////////////////////////////////////////////////////////////////////
//CLASS_LIST_WITH_CARDINALITY → , class_name RELATION_CARDINALITY CLASS_LIST_WITH_CARDINALITY
//CLASS_LIST_WITH_CARDINALITY → ε
  static final public void class_list_with_cardinality() throws ParseException {
    class_name();
    relation_cardinality();
    class_list_with_cardinality();
  }

////////////////////////////////////////////////////////////////
//RELATION_CARDINALITY → ε
//RELATION_CARDINALITY → (CARDINALITY, CARDINALITY, CARDINALITY)
  static final public void relation_cardinality() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      cardinality();
      jj_consume_token(14);
      cardinality();
      jj_consume_token(14);
      cardinality();
      jj_consume_token(15);
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

//////////////////////
//CARDINALITY → string
//CARDINALITY → ε
  static final public void cardinality() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

///////////////////////////////////
//ATTRIBUTES → ATTRIBUTE ATTRIBUTES
//ATTRIBUTES → ε
  static final public void attributes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
      attribute();
      attributes();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

////////////////////////////////////////////////////////////////////////////
//ATTRIBUTE → COMMENT VISIBILITY ATTRIBUTE_TYPE attribute_name DEFAULT_VALUE
  static final public void attribute() throws ParseException {
    comment();
    visibility();
    attribute_type();
    attribute_name();
    default_value();
  }

  static final public void attribute_name() throws ParseException {
    jj_consume_token(VARIABLE);
  }

/////////////////////////
//DEFAULT_VALUE → ε
//DEFAULT_VALUE → EQUAL_TO
  static final public void default_value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      equal_to();
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

/////////////////////////
//EQUAL_TO →  value
  static final public void equal_to() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//////////////////////////
//METHODS → METHOD METHODS
//METHODS → ε
  static final public void methods() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
      method();
      methods();
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

/////////////////////////////////////////////////////////////////////
//METHOD → COMMENT VISIBILITY METHOD_TYPE method_name { METHOD_ARGS }
  static final public void method() throws ParseException {
    comment();
    visibility();
    method_type();
    method_name();
    jj_consume_token(5);
    method_args();
    jj_consume_token(6);
  }

  static final public void method_name() throws ParseException {
    jj_consume_token(VARIABLE);
  }

////////////////////////////////////////////////
//METHOD_ARGS → METHOD_ARG METHOD_ARGS_ITERATION
  static final public void method_args() throws ParseException {
    method_arg();
    mathod_args_iteration();
  }

////////////////////////////////////////////////////////////
//METHOD_ARGS_ITERATION → , METHOD_ARG METHOD_ARGS_ITERATION
//METHOD_ARGS_ITERATION → ε 
  static final public void mathod_args_iteration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
      method_arg();
      mathod_args_iteration();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

//////////////////////////////////////////////////////
//METHOD_ARG → COMMENT ARG_TYPE arg_name DEFAULT_VALUE
  static final public void method_arg() throws ParseException {
    comment();
    arg_type();
    arg_name();
    default_value();
  }

  static final public void arg_name() throws ParseException {
    jj_consume_token(VARIABLE);
  }

/////////////////////////
//CLASS_TYPE → interface
//CLASS_TYPE → class
  static final public void class_type() throws ParseException {
    jj_consume_token(CLASS_TYPE);
  }

////////////////////
//METHOD_TYPE → TYPE
  static final public void method_type() throws ParseException {
    type();
  }

//ARG_TYPE → TYPE
  static final public void arg_type() throws ParseException {
    type();
  }

///////////////////////
//ATTRIBUTE_TYPE → TYPE
  static final public void attribute_type() throws ParseException {
    type();
  }

///////////////
//TYPE → string
//TYPE → ε 
  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

//////////////////////
//VISIBILITY → private
//VISIBILITY → public
//VISIBILITY → string
//VISIBILITY → ε 
  static final public void visibility() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VISIBILITY:
      jj_consume_token(VISIBILITY);
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  static private boolean jj_initialized_once = false;
  static public uml2svgTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x200,0x400,0x60400,0x1400,0x2000,0x800000,0x400,0x10000,0x880000,0x400,0x400,0x800000,0x40000,};
   }

  public uml2svg(java.io.InputStream stream) {
     this(stream, null);
  }
  public uml2svg(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new uml2svgTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public uml2svg(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new uml2svgTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public uml2svg(uml2svgTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public void ReInit(uml2svgTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[24];
    for (int i = 0; i < 24; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
