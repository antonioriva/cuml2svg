/**
 * JavaCC file
 */


options {
  JDK_VERSION = "1.5";
  LOOKAHEAD=2;
  STATIC=false;
}
PARSER_BEGIN(cuml2svg)
package org.cuml2svg.compiler;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import org.cuml2svg.model.*;
import org.cuml2svg.svg.SVGExporter;
import org.cuml2svg.model.Class;
import org.cuml2svg.tools.RectDrawer;

public class cuml2svg {
	static ArrayList<Class> declaredClassList= new ArrayList<Class>();
	static Diagram diagram=new Diagram("",Diagram.DiagramType.UML);
	static String currentPackage="";
	static String currentFileName="";
	static String currentClassName="";
	static boolean warningFlag= true;
	static boolean noticeFlag= true;
	static boolean errorFlag= true;
	static boolean renderFlag= true;
	static cuml2svg parser;
	
	public cuml2svg(String input, String output,boolean warningFlag,boolean noticeFlag,boolean errorFlag){
		this.warningFlag=warningFlag;
		this.noticeFlag=noticeFlag;
		this.errorFlag=errorFlag;
		try {
      		 parser = new cuml2svg(new FileInputStream(input));
    	 	 currentFileName=input;
    		 parser.s();          
		
			 SVGExporter exporter = new SVGExporter(diagram,output);
			 //SVGExporter exporter = new SVGExporter(diagram,output,renderFlag);
			 exporter.export();
			 //RectDrawer.main(null);
        
      	} catch (FileNotFoundException e1) {
    		printError("inout file not found",-1,-1);
    		
   		}catch (ParseException e) {
	        printError("parser error",-1,-1);
	        System.err.println(e.getMessage());
	        //e.printStackTrace();
	        
      	}catch (Error e) {
	        printError("generic error",-1,-1);
	        System.err.println(e.getMessage());
	        //e.printStackTrace();
	    }
	}
	
	
	public static boolean isClassAlreadyDeclared(String className){
		  for (Iterator iter = declaredClassList.iterator(); iter.hasNext();) {
	          Class element =  (Class)iter.next();
	          if(element.getClassName().compareTo(className)==0){
	        	  return true;
	          }
	          
	       }
		  return false;
  	}
  
	public static Class getClassByClassName(String className){
	  		for (Iterator iter = declaredClassList.iterator(); iter.hasNext();) {
	          Class element =  (Class)iter.next();
	          if(element.getClassName().compareTo(className)==0){
	        	  return element;
	          }
	          
	       }
		return null;
	}
  
	public static void printNotice(String message,int lineNumber,int columnNumber){
		if(noticeFlag){
			System.out.print("NOTICE: "+message+" in file: \""+currentFileName+"\"");
			if(lineNumber >= 0 &&columnNumber >= 0){
				System.out.println(" at line "+lineNumber+ " at column "+columnNumber);
			}else{
				System.out.println("");
			}
		}
	}

	public static void printWarning(String message,int lineNumber,int columnNumber){
		if(warningFlag){
			System.out.print("WARNING: "+message+" in file: \""+currentFileName+"\"");
			if(lineNumber >= 0 &&columnNumber >= 0){
				System.out.println(" at line "+lineNumber+ " at column "+columnNumber);
			}else{
				System.out.println("");
			}
		}
	}

	public static void printError(String message,int lineNumber,int columnNumber){
		if(errorFlag){
			System.err.print("ERROR: "+message+" in file: \""+currentFileName+"\"");
			if(lineNumber >= 0 &&columnNumber >= 0){
				System.err.println(" at line "+lineNumber+ " at column "+columnNumber);
			}else{
				System.out.println("");
			}
		}
	}
}

	      	
PARSER_END(cuml2svg)

SKIP : {
	< ("//" (~["\n"])* ) >
//|	< ("/*" (~[])*  "*/") >
| 	" "
|	"\r"
|	"\t"
|	"\n"

}

MORE : { "/*": IN_COMMENT } 
< IN_COMMENT > MORE : {<  ~[] > } 
< IN_COMMENT > SKIP : {  "*/": DEFAULT }

TOKEN:{
//	<COMMENT: "//"(~["\n"])* | "#"(~["\n"])* |	"/*"(~[])*"*/" >

 	<COMMENT: ("#"(~["\n"])*)>
|	<PACKAGE: "package">
|	<RELATIONS: "relations">
|	<ATTRIBUTES: "attributes">	
|	<METHOD: "methods" >
//|	<IMPORT: "import">
}

TOKEN:{
	<IMPORT: "import"> : IMPORT_STATE
}
<IMPORT_STATE>  TOKEN : { <FILE_NAME: (~[";"])* > : DEFAULT  }


TOKEN:{
	<COLLAPSE: "@collapse"> : COLLAPSE_STATE
} 
<COLLAPSE_STATE> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<COLLAPSE_STATE>  TOKEN : { <COLLAPSE_TYPE: "all" | "methods" | "attributes" > : DEFAULT  }

TOKEN:{
	<LAYOUT: "@layout"> : LAYOUT_STATE
} 
<LAYOUT_STATE> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<LAYOUT_STATE>  TOKEN : { <LAYOUT_CARD: ((["1"-"9"])(["0"-"9"])* "x*") | ("*x" (["1"-"9"])(["0"-"9"])*) | ("*x*") > : DEFAULT  }
<LAYOUT_STATE>  TOKEN : { <OVERLAPPED: "overlapped"> : DEFAULT }


TOKEN:{
	<MARGIN: "@margin">: MARGIN_STATE 
} 
<MARGIN_STATE> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"| "\n"}
<MARGIN_STATE>  TOKEN : { <MARGIN_SIZE_TOP:(["0"-"9"])+ ("px")? > : MARGIN_STATE_1  }

<MARGIN_STATE_1> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"| "\n"}
<MARGIN_STATE_1>  TOKEN : { <MARGIN_SIZE_RIGHT:(["0"-"9"])+ ("px")? > : MARGIN_STATE_2  }

<MARGIN_STATE_2> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"| "\n"}
<MARGIN_STATE_2>  TOKEN : { <MARGIN_SIZE_BOTTOM:(["0"-"9"])+ ("px")? > : MARGIN_STATE_3  }

<MARGIN_STATE_3> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"| "\n"}
<MARGIN_STATE_3>  TOKEN : { <MARGIN_SIZE_LEFT:(["0"-"9"])+ ("px")? >  : DEFAULT }
	


//riconosce i nomi delle classi come CLASS_NAME
TOKEN:{
	<CLASS_TYPE: "interface" | "class"> : CLASS_STATE
}
<CLASS_STATE> SKIP:{< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<CLASS_STATE> TOKEN:{	<CLASS_NAME_WITH_PACKAGE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+ ("." (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+)+ > :DEFAULT}
<CLASS_STATE> TOKEN:{	<CLASS_NAME: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+> :DEFAULT}



TOKEN:{
	<VISIBILITY: "private" | "public" | "protected">
| 	<RELATION_TYPE: "use" | "extend" |"associate"| "include"| "composed"| "realize"| "depend" >
|	<EQUAL:"=">
}

TOKEN:{
	<STYLE: "@style">
|	<POSITION: "@position">
|	<GROUP: "@group">
|	<BACKGROUND_COLOR: "@backgroud-color">
|	<COLOR: "@color">


}

TOKEN:{
  	<NUMBER:  ("+" | "-")? (["0" - "9"])+ ("." (["0" - "9"] )+)?>
|	<STRING: "\"" (~[])* "\"">
|	<VARIABLE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )*>
|	<HEX_COLOR: ("#" (["0"-"9", "a"-"f", "A"-"F"]){3} (["0"-"9", "a"-"f", "A"-"F"]){3})>
|	<CLASS_VARIABLE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+ ("." (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+)*>
}



////////////////////////////////////////////////////////////////
//S → diagram DIAGRAM_TYPE diagram_name { DIAGRAM_CONTENT }
void s() :  {Token t;}{
//	model()
	{
		printNotice("starting parsing",-1,-1);
	}
	layout()
	 < EOF >
	
}

void layout():{}{
	(import_definition())+	
	
	main_group()
}

void import_definition():{
	Token n;
	String oldFileName;
}{
	<IMPORT> 
	n = <FILE_NAME> {
		try{
			printNotice("importing model file \""+n.image.trim()+"\"",n.beginLine,n.beginColumn);
			cuml2svg modelParser = new cuml2svg(new FileInputStream(n.image.trim()));
			oldFileName=currentFileName;
			currentFileName=n.image.trim();
    		modelParser.model();
    		currentFileName=oldFileName;
    	} catch (FileNotFoundException e1) {
    		printError("file not found \""+n.image.trim()+"\"",n.beginLine,n.beginColumn);
    	}
	}
	";"
	
	
}

void main_group():{Group mainGroup;}{
	{
		mainGroup=new Group();
		mainGroup.setProperty("margin-left","100");
		mainGroup.setProperty("margin-top","100");
		diagram.addObject(mainGroup);
	}
	groups(mainGroup)
}

void groups(Group parentGroup):{Group currentGroup;}{
	{	
		currentGroup=new Group();
		parentGroup.addObject(currentGroup);
	}
	"[" 
		((group_preference(currentGroup))* 
		( groups(currentGroup) | group_definition(currentGroup))+) 
	"]"
}

void group_preference(Group currentGroup):{}{
	
	layout_preference(currentGroup)
|	margin_preference(currentGroup)
|	collapse_preference(currentGroup)
|	color_preference(currentGroup)


}

void group_definition(Group currentGroup):{Token name;}{
	
	"[" <CLASS_TYPE> (name=<CLASS_NAME_WITH_PACKAGE>|name=<CLASS_NAME>) "]"
	
	{	
		Class c= this.getClassByClassName(name.image);
		
		if(c!=null){
			printNotice("adding class named "+name.image+ " to the diagram",name.beginLine,name.beginColumn);
    		currentGroup.addObject(c);
    		
		}else{
			printError("class named "+name.image+ " doesn't exist",name.beginLine,name.beginColumn);
		}
	}

}

void layout_preference(Group currentGroup):{Token t;}{
	
	<LAYOUT> ( t=<LAYOUT_CARD> | t=<OVERLAPPED> )
	{currentGroup.setProperty("layout",t.image);}
}

void collapse_preference(Group currentGroup):{Token t;}{
	
	<COLLAPSE> t=<COLLAPSE_TYPE> 
	{
	if(t.image.compareTo("all")==0){
    	currentGroup.setMethodsCollapsed(true);
    	currentGroup.setAttributesCollapsed(true);
    }else if(t.image.compareTo("methods")==0){

    	currentGroup.setMethodsCollapsed(true);
    }else if(t.image.compareTo("attributes")==0){

    	currentGroup.setAttributesCollapsed(true);
    }
	}
}

void margin_preference(Group currentGroup):{Token t;}{
	//TODO la posizione è data per deprecata; se è così fare in modo di toglierla
	<MARGIN> t=<MARGIN_SIZE_TOP>
	{currentGroup.setProperty("margin-top",t.image.replaceAll("px","").trim());}
	t=<MARGIN_SIZE_RIGHT>
	{currentGroup.setProperty("margin-right",t.image.replaceAll("px","").trim());}
	t=<MARGIN_SIZE_BOTTOM>
	{currentGroup.setProperty("margin-bottom",t.image.replaceAll("px","").trim());}
	t=<MARGIN_SIZE_LEFT>
	{currentGroup.setProperty("margin-left",t.image.replaceAll("px","").trim());}
}







void color_preference(Group currentGroup):{Token t;}{
	//TODO il colore è data per deprecata; se è così fare in modo di toglierla
	t=<COLOR> <HEX_COLOR>
	{printWarning("@color property deprecated, definition skipped",t.beginLine,t.beginColumn);}
	
}

	



////////////////////////////////////////////////////////////////
//DIAGRAM_CONTENT → PACKAGE_DEFINITIONS
//DIAGRAM_CONTENT → CLASS_DEFINITIONS
//enable to skip package definition for 1 package diagram
//force the diagram to have at leas one package or one classes
void model() :  {}
{
	(class_definition())+ 
|	(package_definition())+
}




///////////////////////////////////////////////////////////////////
//PACKAGE_DEFINITION → package package_name { CLASS_DEFINITIONS }
void package_definition():{String packageName;}{
	<PACKAGE> 
	packageName=package_name(){this.currentPackage=packageName;} 
	
	"{" (class_definition())+ "}" 
	{this.currentPackage="";}
	
}

String package_name():{Token packageName;}{
	packageName=<VARIABLE> {return packageName.image; }
}




///////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASS_DEFINITION → OPTIONAL_COMMENT VISIBILITY CLASS_TYPE class_name { RELATIONS ATTRIBUTES METHODS }
void class_definition():{
	Token className,vis,type;
	Class currentDefinition;
	
}{	
	(<COMMENT>)? (vis=<VISIBILITY>)? type=<CLASS_TYPE> className=<CLASS_NAME>
	{
		if(this.currentPackage.length()>0){
			className.image= this.currentPackage+"."+className.image;
		}
		
		//TODO decommentare le proprietà
		currentDefinition=new Class(className.image);
		//currentDefinition.setVisibility(vis.image);
		//currentDefinition.setType(type.image);
		
	} 
	
	"{" (relations(currentDefinition))? (attributes(currentDefinition))? (methods(currentDefinition))? "}"
	
	{
		if(isClassAlreadyDeclared(className.image)){
			printWarning("class "+className.image+" already exist, the new definition was skipped",className.beginLine,className.beginColumn);
		}else{
			this.declaredClassList.add(currentDefinition);
		}
	}
}



/////////////////////////////////////////////////
//RELATIONS → relations { RELATION_DEFINITIONS }
void relations(Class currentDefinition):{}{
	<RELATIONS> "{" (relation(currentDefinition))+ "}"
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//RELATION_DEFINITION → OPTIONAL_COMMENT RELATION_TYPE class_name RELATION_CARDINALITY CLASS_LIST_WITH_CARDINALITY
void relation(Class currentDefinition):{Token r;Token t;}{
	//TODO forse al posto di variable sarebbe meglio classname
	
	(<COMMENT>)? t=<RELATION_TYPE> r=<VARIABLE>
	{
				//TODO aggiungere la classe alle relazioni
			currentDefinition.addRelation(new Relation(currentDefinition.getClassName(),r.image,RelationType.valueOf(t.image)));
            	
		printNotice("the class "+currentDefinition.getClassName()+" is in relation \""+t.image+ "\" with the class "+r.image,r.beginLine,r.beginColumn);
	}
	
	(relation_cardinality())? ("," r=<VARIABLE> 
	{
		//TODO aggiungere la classe alle relazioni
		printNotice("the class "+currentDefinition.getClassName()+" is in relation \""+t.image+ "\" with the class "+r.image,r.beginLine,r.beginColumn);
	}
	 (relation_cardinality())? )* ";"
}


////////////////////////////////////////////////////////////////
//RELATION_CARDINALITY → ε
//RELATION_CARDINALITY → (CARDINALITY, CARDINALITY, CARDINALITY)
void relation_cardinality():{}{
	//TODO aggangiare la cardinalità in relation
	"(" (cardinality())? "," (cardinality())? "," (cardinality())? ")"
}

//////////////////////
//CARDINALITY → string
//CARDINALITY → ε
void cardinality():{}{
	<STRING>
}

////////////////////////////////////
//ATTRIBUTES → ATTRIBUTE_DEFINITIONS
//ATTRIBUTES → ε
void attributes(Class currentDefinition):{}{
	<ATTRIBUTES> "{" (attribute(currentDefinition))+ "}"
}



////////////////////////////////////////////////////////////////////////////
//ATTRIBUTE → COMMENT VISIBILITY ATTRIBUTE_TYPE attribute_name DEFAULT_VALUE
void attribute(Class currentDefinition):{
	Token vis;
}{
	(<COMMENT>)? 
	(vis=<VISIBILITY>)? 
	(typed_attribute_name() | attribute_name() )
	(default_value())? ";"
	//gli attributi non vengono aggiunti
	//{currentDefinition.addAttribute()};
}

void attribute_name():{}{
	<VARIABLE>
}

void typed_attribute_name():{}{
	<VARIABLE> <VARIABLE>
}


//TODO i valori di defaut non vengono aggiunti
/////////////////////////
//DEFAULT_VALUE → ε
//DEFAULT_VALUE → EQUAL_TO
void default_value():{}{	
	<EQUAL> equal_to()
}




/////////////////////////
//EQUAL_TO →  value
void equal_to():{}{
	<NUMBER>
| 	<STRING>
}



//////////////////////////
//METHODS → METHOD_DEFINITION
//METHODS → ε
void methods(Class currentDefinition):{}{
	<METHOD> "{" (method(currentDefinition))+ "}" 
}




/////////////////////////////////////////////////////////////////////
//METHOD → OPTIONAL_COMMENT VISIBILITY METHOD_TYPE method_name { METHOD_ARGS }
//METHOD_TYPE → TYPE
void method(Class currentDefinition):{
	Token vis,name;
}{
	(<COMMENT>)? 
	(vis=<VISIBILITY>)? 
	//TODO gli argomenti dei metodi non sono gestiti
	(name=typed_method() | name=method_name())
	"(" (method_arg() ("," method_arg())* )? ")" ";"
	{
		currentDefinition.addMethod(new Method(name.image));
	}
}

Token typed_method():{Token name;}{
	<VARIABLE> name=<VARIABLE> 
	{
		return name;
	}
}

Token method_name():{Token name;}{
	name=<VARIABLE> 
	{
		return name;
	}
}

//////////////////////////////////////////////////////
//METHOD_ARG → COMMENT ARG_TYPE arg_name DEFAULT_VALUE
//ARG_TYPE → TYPE
void method_arg():{}{
	(<COMMENT>)? 
	(typed_arg() | arg_name())
	(default_value())?
}
void arg_name():{}{
	<VARIABLE>
}

void typed_arg():{}{
	<VARIABLE> <VARIABLE>
}



///////////////////////
//ATTRIBUTE_TYPE → TYPE
void attribute_type():{}{
	type()
}


///////////////
//TYPE → string
//TYPE → ε 
void type ():{}
{
	<VARIABLE> 
}





