options {
  JDK_VERSION = "1.5";
  LOOKAHEAD=2;
  STATIC=false;
}
PARSER_BEGIN(cuml2svg)
package org.cuml2svg.compiler;

import java.io.PrintStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import org.cuml2svg.model.*;
import org.cuml2svg.svg.SVGExporter;
import org.cuml2svg.model.Class;
import org.cuml2svg.tools.RectDrawer;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.TreeMap;
import java.util.Set;
import java.io.File;

public class cuml2svg {
	static ArrayList<Class> declaredClassList= new ArrayList<Class>();
    static ArrayList<RelationRef> declaredRelationList= new ArrayList<RelationRef>();
	static ArrayList<Class> classInDiagram= new ArrayList<Class>();
	static Diagram diagram=new Diagram("",Diagram.DiagramType.UML);
	static String currentPackage="";
	static String currentFileName="";
	static String currentClassName="";
	static boolean warningFlag= true;
	static boolean noticeFlag= true;
	static boolean errorFlag= true;
	static boolean renderFlag= true;
	static boolean checkLayout=false;
	static boolean checkModel=false;
	
	static cuml2svg parser;
	
	public cuml2svg(String input, String output,String templatePath,boolean warningFlag,boolean noticeFlag,boolean errorFlag,boolean checkModel,boolean checkLayout){
		this.warningFlag=warningFlag;
		this.noticeFlag=noticeFlag;
		this.errorFlag=errorFlag;
		this.checkLayout = checkLayout;
		this.checkModel= checkModel;
		try {
      		 parser = new cuml2svg(new FileInputStream(input));
    	 	 currentFileName=input;
    	 	 System.out.println(currentFileName);
    	 	 if(this.checkModel){
    		 	parser.model();
    		 }else{
    		 	parser.s();
    		 }   
		
			if(!(checkModel||checkLayout)){
				 
				 SVGExporter exporter = new SVGExporter(diagram,output,templatePath);
				 exporter.export();
			 }
        
      	} catch (FileNotFoundException e1) {
    		printError("input file not found",-1,-1);
    		
   		}catch (ParseException e) {
	        printError("parser error: "+e.getMessage(),-1,-1);
	        
      	}catch (Error e) {
	        printError("generic error: "+e.getMessage(),-1,-1);
	        
	    }catch(Exception e){
	    	printError("generic error: "+e.getMessage(),-1,-1);
	    }
	}
	
	
	     public static boolean isRelationAlreadyDeclared(Class c, Relation r){
        	for (Iterator iter = c.getRelations().iterator(); iter.hasNext();) {
        		Relation r1 =  (Relation)iter.next();
                if((r1.getEndClass().compareTo(r.getEndClass())==0)
                        && (r1.getStartClass().compareTo(r.getStartClass())==0)
                        && (r1.getRelationType().compareTo(r.getRelationType())==0)){
                        return true;
                }

             }
        	return false;
        }
	
	public static boolean isMethodAlreadyDeclared(Class c, Method m){
            for (Iterator iter = c.getMethods().iterator(); iter.hasNext();) {
            Method mtest =  (Method)iter.next();
            if(mtest.getMethodName().compareTo(m.getMethodName())==0){
            		if(mtest.getParameters().size()==m.getParameters().size()){
            			boolean sameMethod=true;
            			for (int i = 0; i < mtest.getParameters().size(); i++) {
            				if(!(
            				//(mtest.getParameters().get(i).getAttributeName()==
            					//m.getParameters().get(i).getAttributeName())&&
            					(mtest.getParameters().get(i).getAttributeType()!=
                					m.getParameters().get(i).getAttributeType())
            				)){
            					sameMethod=false;
            				}
							
						}
            			if(sameMethod){
            				return true;
            			}
            			
	            	}
            	}

            }
            return false;
        }
	
	public static boolean isDuplicatedArgsName(Method m){
        	ArrayList<String> args = new ArrayList<String>();
        	for (Attribute arg : m.getParameters()) {
				for (Iterator iter = args.iterator(); iter.hasNext();) {
					if(((String) iter.next()).compareTo(arg.getAttributeName())==0){
						return true;
					}
				}
				args.add(arg.getAttributeName());
			}
        	return false;
        }
	
	public static boolean isClassAlreadyDeclared(String className){
		  for (Iterator iter = declaredClassList.iterator(); iter.hasNext();) {
	          Class element =  (Class)iter.next();
	          if(element.getClassName().compareTo(className)==0){
	        	  return true;
	          }
	          
	       }
		  return false;
  	}
  	
  	public static boolean isAttributeAlreadyDeclared(ArrayList<Attribute> l,Attribute a){
		  for (Iterator iter = l.iterator(); iter.hasNext();) {
	          Attribute element =  (Attribute)iter.next();
	          if(element.getAttributeName().compareTo(a.getAttributeName())==0){
	        	  return true;
	          }
	          
	       }
		  return false;
  	}
  
  	public static boolean isClassInDiagram(Class c){
  		for (Iterator iter = classInDiagram.iterator(); iter.hasNext();) {
	          Class element =  (Class)iter.next();
	          if(element.getClassName().compareTo(c.getClassName())==0){
	        	  return true;
	          }
	          
	       }
		 return false;
  	}
  
	public static Class getClassByClassName(String className){
			for (Iterator iter = declaredClassList.iterator(); iter.hasNext();) {
	          Class element =  (Class)iter.next();
	          if(element.getClassName().compareTo(className)==0){
	          		
	        	  return element;
	          }
	       }
	       
		return null;
	}
	
	public static ArrayList<org.cuml2svg.model.Class> getClassByRegEx(String regex){
		ArrayList<org.cuml2svg.model.Class>  l = new ArrayList<org.cuml2svg.model.Class>();
			Pattern pattern =  Pattern.compile(regex);
	  		for (Iterator iter = declaredClassList.iterator(); iter.hasNext();) {
	          Class element =  (Class)iter.next();
	          Matcher matcher = pattern.matcher(element.getClassName());
	            if (matcher.find()) {
	            	l.add(element);
	            }
	       }
		return l;
	}
  
        public static void printNotice(String message,int lineNumber,int columnNumber){
            printNotice(message,currentFileName,lineNumber, columnNumber);
        }
        public static void printNotice(String message,String fileName,int lineNumber,int columnNumber){
			
		if(noticeFlag){
			System.out.print("NOTICE in file: \""+fileName+"\"");
			if(lineNumber >= 0 &&columnNumber >= 0){
				System.out.print("; at line "+lineNumber+ ", at column "+columnNumber+"; ");
			}
			System.out.println(message.replaceAll("\n", " "));
		}
	}

	public static void printWarning(String message,int lineNumber,int columnNumber){
		if(warningFlag){
			System.out.print("WARNING in file: \""+currentFileName+"\";");
			if(lineNumber >= 0 &&columnNumber >= 0){
				System.out.print("; at line "+lineNumber+ ", at column "+columnNumber+"; ");
			}
			System.out.println(message.replaceAll("\n", " "));
		}
	}
public static void printError(String message,int lineNumber,int columnNumber){
		printError(message,currentFileName,lineNumber,columnNumber);
	}
	
	public static void printError(String message,String filename, int lineNumber,int columnNumber){
		if(errorFlag){
			System.err.print("ERROR in file: \""+currentFileName+"\";");
			if(lineNumber >= 0 &&columnNumber >= 0){
				System.err.print(" at line "+lineNumber+ ", at column "+columnNumber+"; ");
			}
			System.err.println(message.replaceAll("\n", " "));
		}
		
		
	}
    public static void checkRelationsClasses(){
            for (Iterator iter = declaredRelationList.iterator(); iter.hasNext();) {
				RelationRef r = (RelationRef) iter.next();
				if(!isClassAlreadyDeclared(r.getR().getStartClass())){
                    printError("class "+r.getR().getStartClass()+ " never declared",r.getFileName(),r.getLine(),r.getColumn());
		            
	            }else{
	            if(!isClassAlreadyDeclared(r.getR().getEndClass())){
		                printError("class "+r.getR().getEndClass()+ " never declared",r.getFileName(),r.getLine(),r.getColumn());
		            }else{
		            	if(!isRelationAlreadyDeclared(r.getParentClass(),r.getR())){
		            		r.getParentClass().addRelation(r.getR());
		            		printNotice("adding relation of "+r.getR().getRelationType()+" from "+r.getR().getStartClass()+ " to "+r.getR().getEndClass()
                                        ,r.getFileName(),r.getLine(),r.getColumn());
		            		}else{
		            		printError("relation of "+r.getR().getRelationType()+" from "+r.getR().getStartClass()+ " to "+r.getR().getEndClass()
                                        +" already declared",r.getFileName(),r.getLine(),r.getColumn());
		            
		            	}
		            }
	            }
	            
			}    
        	

        }

	
	
	
}

	      	
PARSER_END(cuml2svg)

SKIP : {
	< ("//" (~["\n"])* ) >
//|	< ("/*" (~[])*  "*/") >
| 	" "
|	"\r"
|	"\t"
|	"\n"

}

MORE : { "/*": IN_COMMENT } 
< IN_COMMENT > MORE : {<  ~[] > } 
< IN_COMMENT > SKIP : {  "*/": DEFAULT }

TOKEN:{
//	<COMMENT: "//"(~["\n"])* | "#"(~["\n"])* |	"/*"(~[])*"*/" >

 	<COMMENT: ("#"(~["\n"])*)>
|	<RELATIONS: "relations">
|	<ATTRIBUTES: "attributes">	
|	<METHOD: "methods" >
//|	<IMPORT: "import">
}

TOKEN:{
	<IMPORT: "import"> : IMPORT_STATE
}
<IMPORT_STATE>  TOKEN : { <FILE_NAME: (~[";"])* > : DEFAULT  }

TOKEN:{
	<HIDE_ARGS: "@hide-args">
} 


TOKEN:{
	<COLLAPSE: "@collapse"> : COLLAPSE_STATE
} 
<COLLAPSE_STATE> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<COLLAPSE_STATE>  TOKEN : { <COLLAPSE_TYPE: "all" | "methods" | "attributes" > : DEFAULT  }

TOKEN:{
	<LAYOUT: "@layout"> : LAYOUT_STATE
} 
<LAYOUT_STATE> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<LAYOUT_STATE>  TOKEN : { <LAYOUT_CARD: ((["1"-"9"])(["0"-"9"])* "x*") | ("*x" (["1"-"9"])(["0"-"9"])*) | ("*x*") > : DEFAULT  }
<LAYOUT_STATE>  TOKEN : { <OVERLAPPED: "overlapped"> : DEFAULT }


TOKEN:{
	<MARGIN: "@margin">: MARGIN_STATE 
} 
<MARGIN_STATE> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"| "\n"}
<MARGIN_STATE>  TOKEN : { <MARGIN_SIZE_TOP:("-")?(["0"-"9"])+ ("px")? > : MARGIN_STATE_1  }

<MARGIN_STATE_1> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"| "\n"}
<MARGIN_STATE_1>  TOKEN : { <MARGIN_SIZE_RIGHT:("-")?(["0"-"9"])+ ("px")? > : MARGIN_STATE_2  }

<MARGIN_STATE_2> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"| "\n"}
<MARGIN_STATE_2>  TOKEN : { <MARGIN_SIZE_BOTTOM:("-")?(["0"-"9"])+ ("px")? > : MARGIN_STATE_3  }

<MARGIN_STATE_3> SKIP:{	< ("//" (~["\n"])* ) > |" "|"\r"|"\t"| "\n"}
<MARGIN_STATE_3>  TOKEN : { <MARGIN_SIZE_LEFT:("-")?(["0"-"9"])+ ("px")? >  : DEFAULT }
	

TOKEN:{<PACKAGE: "package">: PACKAGE_STATE}
<PACKAGE_STATE> SKIP:{< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<PACKAGE_STATE> TOKEN:{<PACKAGE_NAME: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )*	("."(["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )*)+> :DEFAULT}


//riconosce i nomi delle classi come CLASS_NAME
TOKEN:{
	<CLASS_TYPE: "interface" | "class"> : CLASS_STATE
}
<CLASS_STATE> SKIP:{< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<CLASS_STATE> TOKEN:{	<CLASS_NAME_WITH_PACKAGE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+ ("." (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+)+ > :DEFAULT}
<CLASS_STATE> TOKEN:{	<CLASS_RANGE_WITH_PACKAGE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+ ("." (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+)*  (".*") > :DEFAULT}
<CLASS_STATE> TOKEN:{	<CLASS_NAME: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+> :DEFAULT}

TOKEN:{ <RELATION_TYPE: "use" | "extend" |"associate"| "include"| "composed"| "realize"| "depend" > : RELATION_STATE}
<RELATION_STATE> SKIP:{< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<RELATION_STATE> TOKEN:{	<RELATION_CLASS_NAME_WITH_PACKAGE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+ ("." (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+)+ > :RELATION_CONTROL_STATE}
<RELATION_STATE> TOKEN:{	<RELATION_CLASS_NAME: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+> :RELATION_CONTROL_STATE}



<RELATION_CONTROL_STATE> SKIP:{< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<RELATION_CONTROL_STATE> TOKEN:{<CARDINALITY_START:"("> : RELATION_CARDINALITY_STATE}
<RELATION_CONTROL_STATE> TOKEN:{ <RELATION_COMMA: ",">: RELATION_STATE}
<RELATION_CONTROL_STATE> TOKEN:{ <RELATION_END: ";">: DEFAULT}

<RELATION_CARDINALITY_STATE> TOKEN:{ <CARDINALITY: "\"" (~["\""])* "\"">:RELATION_CARDINALITY_STATE}
<RELATION_CARDINALITY_STATE> SKIP:{< ("//" (~["\n"])* ) > |" "|"\r"|"\t"|	"\n"}
<RELATION_CARDINALITY_STATE> TOKEN:{ <RELATION_CARDINALITY_COMMA: ",">: RELATION_CARDINALITY_STATE}
<RELATION_CARDINALITY_STATE> TOKEN:{ <CARDINALITY_STOP:")"> : RELATION_CONTROL_STATE} 



TOKEN:{
	<VISIBILITY: "private" | "public" | "protected">
|	<EQUAL:"=">
}

//TOKEN:{
//	<STYLE: "@style">
//|	<POSITION: "@position">
//|	<GROUP: "@group">
//|	<BACKGROUND_COLOR: "@backgroud-color">
//|	<COLOR: "@color">
//}

TOKEN:{
  	<NUMBER:  ("+" | "-")? (["0" - "9"])+ ("." (["0" - "9"] )+)?>
|	<STRING: "\"" (~["\""])* "\"">
|	<VARIABLE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )*>
|	<HEX_COLOR: ("#" (["0"-"9", "a"-"f", "A"-"F"]){3} (["0"-"9", "a"-"f", "A"-"F"]){3})>
|	<CLASS_VARIABLE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+ ("." (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+)*>
}




///s -> layout /
void s() :  {Token t;}{
//	model()
	{
		printNotice("starting parsing",-1,-1);
	}
	layout()
	{checkRelationsClasses();}
	 < EOF >
	
}

///layout -> import_definition+	main_group
void layout():{}{
	
	(import_definition())+	
	
	main_group()
}

///import_definition -> IMPORT FILE_NAME ;
void import_definition():{
	Token n;
	String oldFileName;
}{
	<IMPORT> 
	n = <FILE_NAME> {
		try{
			
			printNotice("importing model file \""+n.image.trim()+"\"",n.beginLine,n.beginColumn);
			File f = new File((new File(currentFileName).getParent())+"/"+n.image.trim());
			if(f.isFile()){
				
					cuml2svg modelParser = new cuml2svg(new FileInputStream(f));
					oldFileName=currentFileName;
					currentFileName=n.image.trim();
		    		modelParser.model();
		    		currentFileName=oldFileName;
	    		
    		}else{
    			printError("file not found \""+n.image.trim()+"\"",n.beginLine,n.beginColumn);
    		}
    	} catch (FileNotFoundException e1) {
    		printError("file not found \""+n.image.trim()+"\"",n.beginLine,n.beginColumn);
    	}
	}
	";"
	
	
}


///main_group -> groups
void main_group():{Group mainGroup;}{
	{
		mainGroup=new Group();
		mainGroup.setProperty("margin-left","200");
		mainGroup.setProperty("margin-top","200");
		mainGroup.setProperty("margin-right","200");
		mainGroup.setProperty("margin-bottom","200");
		diagram.addObject(mainGroup);
	}
	groups(mainGroup)
}

///groups -> group_preference* (groups|group_definition)+
void groups(Group parentGroup):{Group currentGroup;}{
	{	
		currentGroup=new Group();
		parentGroup.addObject(currentGroup);
	}
	"[" 
		(
		(group_preference(currentGroup))* 
		( groups(currentGroup) | group_definition(currentGroup))+
		) 
	"]"
}

///group_preference -> layout_preference
///group_preference -> margin_preference
///group_preference -> collapse_preference
///group_preference -> args_preference
void group_preference(Group currentGroup):{}{
	
	layout_preference(currentGroup)
|	margin_preference(currentGroup)
|	collapse_preference(currentGroup)
|	args_preference(currentGroup)


}

///group_definition -> [ (CLASS_TYPE | CLASS_NAME_WITH_PACKAGE | CLASS_NAME | CLASS_RANGE_WITH_PACKAGE) ]
void group_definition(Group currentGroup):{Token name;}{
	
	"(" <CLASS_TYPE> (name=<CLASS_NAME_WITH_PACKAGE>|name=<CLASS_NAME>|name=<CLASS_RANGE_WITH_PACKAGE>) ")"
	
	{	
		if(name.image.indexOf("*")>0){
			{//TODO need more test
			}
			String clist=name.image.replaceAll("\\.","\\\\.");
			clist=clist.replaceAll("\\*","[^\\\\.]*\\$");
			ArrayList<Class> l = this.getClassByRegEx(clist);
			
			for(Class c : l){
				if(!isClassInDiagram(c)){
					currentGroup.addObject(c);
					classInDiagram.add(c);
				}else{
					printError("class named "+c.getClassName()+ " already in diagram, it will be not inserted",name.beginLine,name.beginColumn);
				}
			}
			
		}else{
			Class c= this.getClassByClassName(name.image);
			
			if(c!=null){
				printNotice("adding class named "+name.image+ " to the diagram",name.beginLine,name.beginColumn);
	    		if(!isClassInDiagram(c)){
					currentGroup.addObject(c);
					classInDiagram.add(c);
				}else{
					printError("class named "+c.getClassName()+ " already in diagram, it will be not inserted",name.beginLine,name.beginColumn);
				}
	    		
			}else{
				printError("class named "+name.image+ " doesn't exist",name.beginLine,name.beginColumn);
			}
		}
	}

}

///layout_preference -> LAYOUT LAYOUT_CARD
void layout_preference(Group currentGroup):{Token t;}{
	
	<LAYOUT> t=<LAYOUT_CARD> 
	{currentGroup.setProperty("layout",t.image);}
}

///collapse_preference -> COLLAPSE COLLAPSE_TYPE
void collapse_preference(Group currentGroup):{Token t;}{
	
	<COLLAPSE> t=<COLLAPSE_TYPE> 
	{
	if(t.image.compareTo("all")==0){
    	currentGroup.setMethodsCollapsed(true);
    	currentGroup.setAttributesCollapsed(true);
    }else if(t.image.compareTo("methods")==0){

    	currentGroup.setMethodsCollapsed(true);
    }else if(t.image.compareTo("attributes")==0){

    	currentGroup.setAttributesCollapsed(true);
    }
	}
}

///args_preference HIDE_ARGS
void args_preference(Group currentGroup):{Token t;}{
	
	<HIDE_ARGS>
	{
	currentGroup.setHideArgs(true);
	}
}

///margin_preference -> MARGIN MARGIN_SIZE_TOP MARGIN_SIZE_RIGHT MARGIN_SIZE_BOTTOM MARGIN_SIZE_LEFT
void margin_preference(Group currentGroup):{Token t;}{
	<MARGIN> t=<MARGIN_SIZE_TOP>
	{currentGroup.setProperty("margin-top",t.image.replaceAll("px","").trim());}
	t=<MARGIN_SIZE_RIGHT>
	{currentGroup.setProperty("margin-right",t.image.replaceAll("px","").trim());}
	t=<MARGIN_SIZE_BOTTOM>
	{currentGroup.setProperty("margin-bottom",t.image.replaceAll("px","").trim());}
	t=<MARGIN_SIZE_LEFT>
	{currentGroup.setProperty("margin-left",t.image.replaceAll("px","").trim());}
}



///model -> (class_definition+ | package_definition+) /
void model() :  {}
{
	(class_definition())+ 
|	(package_definition())+

<EOF>
}


///package_definition -> PACKAGE PACKAGE_NAME { class_definition+ }
void package_definition():{Token packageName;}{
	
	<PACKAGE> 
	packageName=<PACKAGE_NAME>{this.currentPackage=packageName.image;} 
	
	"{" (class_definition())+ "}" 
	{this.currentPackage="";}
}





///class_definition -> COMMENT? VISIBILITY? CLASS_TYPE CLASS_NAME { relations? attributes? methods? }
void class_definition():{
	Token className,type; Token vis=null;
	Class currentDefinition;
	
}{	
	
	(<COMMENT>)? (vis=<VISIBILITY>)? type=<CLASS_TYPE> className=<CLASS_NAME>
	{
		if(this.currentPackage.length()>0){
			className.image= this.currentPackage+"."+className.image;
		}
		
		
		currentDefinition=new Class(className.image);
		if(vis!=null){currentDefinition.setVisibility(vis.image); }
		if(type.image.compareTo("class")==0){
                    currentDefinition.setType(0);}else if(type.image.compareTo("interface")==0){
                        currentDefinition.setType(1);}
		
	} 
	
	
	"{" (relations(currentDefinition))? (attributes(currentDefinition))? (methods(currentDefinition))? "}"
	
	{
		if(isClassAlreadyDeclared(className.image)){
			printError("class "+className.image+" already exist, the new definition was skipped",className.beginLine,className.beginColumn);
		}else{
			this.declaredClassList.add(currentDefinition);
		}
	}
}



///relations -> RELATIONS { relation }
void relations(Class currentDefinition):{}{
	<RELATIONS> "{" 
	(relation(currentDefinition))+ "}"
}




///relation -> COMMENT? RELATION_TYPE (RELATION_CLASS_NAME | RELATION_CLASS_NAME_WITH_PACKAGE) relation_cardinality? (RELATION_COMMA (RELATION_CLASS_NAME|RELATION_CLASS_NAME_WITH_PACKAGE) relation_cardinality?)* RELATION_END
void relation(Class currentDefinition):{Token r;Token t;String[] cards;Relation rel;}{
	{
	}
	(<COMMENT>)? t=<RELATION_TYPE> 
	((r=<RELATION_CLASS_NAME>)|(r=<RELATION_CLASS_NAME_WITH_PACKAGE>))
	
	{rel = new Relation(currentDefinition.getClassName(),r.image,RelationType.valueOf(t.image));}
	
	(cards=relation_cardinality() 	
		{rel.setCardinality(cards);}
	)? 
	{
	
		//currentDefinition.addRelation(rel);
        declaredRelationList.add(new RelationRef(rel, r.beginLine,r.beginColumn,currentFileName,currentDefinition));
        printNotice("the class "+currentDefinition.getClassName()+" is in relation \""+t.image+ "\" with the class "+r.image,r.beginLine,r.beginColumn);
		}
	
	//lista delle relazioni opzionale
	(<RELATION_COMMA> 
	
	((r=<RELATION_CLASS_NAME>)|(r=<RELATION_CLASS_NAME_WITH_PACKAGE>))
	
	{rel = new Relation(currentDefinition.getClassName(),r.image,RelationType.valueOf(t.image));}
	
	(cards=relation_cardinality() 	
		{rel.setCardinality(cards);}
	)? 
	{	
		//currentDefinition.addRelation(rel);
     	 declaredRelationList.add(new RelationRef(rel, r.beginLine,r.beginColumn,currentFileName,currentDefinition));
         printNotice("the class "+currentDefinition.getClassName()+" is in relation \""+t.image+ "\" with the class "+r.image,r.beginLine,r.beginColumn);
	}
	
	 )* <RELATION_END>
}


///relation_cardinality -> CARDINALITY_START CARDINALITY RELATION_CARDINALITY_COMMA 						 				   CARDINALITY RELATION_CARDINALITY_COMMA 										   CARDINALITY CARDINALITY_STOP
String[] relation_cardinality():{Token card;}{
	{String[] cards= new String[3];}
	<CARDINALITY_START>
	card=<CARDINALITY> {cards[0]=card.image.substring(1,card.image.length()-1); }
	<RELATION_CARDINALITY_COMMA> card=<CARDINALITY> {cards[1]=card.image.substring(1,card.image.length()-1); } 
	<RELATION_CARDINALITY_COMMA> card=<CARDINALITY> {cards[2]=card.image.substring(1,card.image.length()-1);} 
	<CARDINALITY_STOP>
	{return cards;}
	
}


///attributes -> ATTRIBUTES { attribute+ }
void attributes(Class currentDefinition):{
	ArrayList<Attribute> l;
}{
	{l=new ArrayList<Attribute>();}
	<ATTRIBUTES> "{" (attribute(currentDefinition,l))+ "}"
}



///attribute -> COMMENT? VISIBILITY? (typed_attribute_name|attribute_name) default_value?
void attribute(Class currentDefinition, ArrayList<Attribute> l):{
	Token vis=null; AttributeRef a;String s;
}{
	(<COMMENT>)? 
	
	(vis=<VISIBILITY>)? 
	(a=typed_attribute_name() | a=attribute_name() )
	{if(vis!=null){a.getAttribute().setAttributeVisibility(vis.image);}}
	
	(s=default_value(){a.getAttribute().setDefaultValue(s);})? ";"
	{
		if(!isAttributeAlreadyDeclared(l,a.getAttribute())){
			currentDefinition.addAttribute(a.getAttribute());
			l.add(a.getAttribute());
		}else{
			//TODO ottenere il numero di linea e di colonna dal token
			printError("attribute "+a.getAttribute().getAttributeName()+" already declared, this definition will be skipped",a.getLine(),a.getColumn());
		}
		}
	
}

///attribute_name -> VARIABLE
AttributeRef attribute_name():{Token t;AttributeRef a;}{
	t=<VARIABLE>
	{a = new AttributeRef(new Attribute(t.image),t.beginLine,t.beginColumn,this.currentFileName);
    	return a;}
}

///typed_attribute_name -> (<VARIABLE>|<STRING>) VARIABLE
AttributeRef typed_attribute_name():{Token t,t1;AttributeRef a;String n;}{
	(
	(t=<VARIABLE> {n= t.image;})
	|(t=<STRING>{ n=t.image.substring(1,t.image.length()-1);})
	) 
	t1=<VARIABLE>
	{
	a = new AttributeRef(new Attribute(t1.image),t.beginLine,t.beginColumn,this.currentFileName);
    a.getAttribute().setAttributeType(n);
	return a;
	}
}



///default_value -> EQUAL equal_to
String default_value():{String value;}{	
	<EQUAL> value=equal_to()
	{return value;}
}

///equal_to -> (NUMBER|STRING)
String equal_to():{Token t;}{
	(t=<NUMBER> | t=<STRING>)
	{return t.image;}
}

///methods -> METHOD { method }
void methods(Class currentDefinition):{}{
	<METHOD> "{" (method(currentDefinition))+ "}" 
}




///method -> COMMENT? VISIBILITY? (typed_method|method_name) "(" (method_arg (, method_arg)*)? ")" ;
void method(Class currentDefinition):{
	Token vis;MethodRef m; Attribute a;
}{
	(<COMMENT>)? 
	(vis=<VISIBILITY>)? 
	(m=typed_method() | m=method_name())
	
	"(" (a=method_arg(){m.getMethod().addParameter(a);}
	
	("," a=method_arg(){m.getMethod().addParameter(a);})* )? ")" ";"
	{
		if(!isMethodAlreadyDeclared(currentDefinition,m.getMethod())){
			if(!isDuplicatedArgsName(m.getMethod())){
				currentDefinition.addMethod(m.getMethod());
			}else{
				printError("method "+m.getMethod().getMethodName()+" contain duplicated args name; this definition will be skipped",m.getLine(),m.getColumn());
		
			}
		}else{
			printError("method "+m.getMethod().getMethodName()+" already declared; this definition will be skipped",m.getLine(),m.getColumn());
		}
	}
}

///typed_method -> (<VARIABLE>|<STRING>) VARIABLE
MethodRef typed_method():{Token name,t;MethodRef m;String n;}{
	(
	(t=<VARIABLE> {n= t.image;})
	|(t=<STRING>{ n=t.image.substring(1,t.image.length()-1);})
	) 
	name=<VARIABLE>
	{
		m= new MethodRef(new Method(name.image),name.beginLine,name.beginColumn,this.currentFileName);
		m.getMethod().setType(n);
		//TODO controllare il tipo del metodo
		return m;
	}
}

///method_name -> VARIABLE
MethodRef method_name():{Token name;MethodRef m;}{
	name=<VARIABLE> 
	{	m= new MethodRef(new Method(name.image),name.beginLine,name.beginColumn,this.currentFileName);
		return m;
	}
}

///method_arg -> COMMENT? (typed_argument|argument) default_value?
Attribute method_arg():{Attribute a;String value;}{
	(<COMMENT>)? 
	(a=typed_argument() | a=argument())
	(value=default_value(){a.setDefaultValue(value);})?
	{return a;}
}

///argument -> VARIABLE
Attribute argument():{Token t;}{
	t=<VARIABLE>
	{
		return new Attribute(t.image);
	}
}

///typed_argument -> (<VARIABLE>|<STRING>) VARIABLE
Attribute typed_argument():{Token t; Token a;String n;}{
	(
	(t=<VARIABLE> {n= t.image;})
	|(t=<STRING>{ n=t.image.substring(1,t.image.length()-1);})
	) 
	a=<VARIABLE>
	{
		Attribute arg=new Attribute(a.image);
		arg.setAttributeType(n);
		return arg;
	}
}




///attribute_type -> type
void attribute_type():{}{
	type()
}


///type -> VARIABLE
void type ():{}
{
	<VARIABLE> 
}





