/**
 * JavaCC file
 */


options {
  JDK_VERSION = "1.5";
  LOOKAHEAD=2;
}
PARSER_BEGIN(cuml2svg)
package org.cuml2svg.compiler;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
public class cuml2svg {
  public static void main(String args[]) throws ParseException {
      try {
    	 cuml2svg parser = new cuml2svg(new FileInputStream("doc/sorgenti_test/visitor.u2sm"));
    	parser.s();
        
      } catch (FileNotFoundException e1) {
    		e1.printStackTrace();
    }catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
      } 
      catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
  
}
}
PARSER_END(cuml2svg)

SKIP : {
	< ("//" (~["\n"])* ) >
|	< ("/*" (~[])*  "*/") >
| 	" "
|	"\r"
|	"\t"
|	"\n"

}

TOKEN:{
//	<COMMENT: "//"(~["\n"])* | "#"(~["\n"])* |	"/*"(~[])*"*/" >

 	<COMMENT: ("#"(~["\n"])*)>
|	<PACKAGE: "package">
|	<RELATIONS: "relations">
|	<ATTRIBUTES: "attributes">	
|	<METHOD: "methods" >
|	<VISIBILITY: "private" | "public" | "protected">
| 	<RELATION_TYPE: "use" | "extend" |"associate"| "include"| "composed"| "realize"| "depend" >
|	<CLASS_TYPE: "interface" | "class">
|	<EQUAL:"=">


|   <NUMBER:  ("+" | "-")? (["0" - "9"])+ ("." (["0" - "9"] )+)?>
|	<STRING: "\"" (~[])* "\"">
|	<VARIABLE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+>
}





////////////////////////////////////////////////////////////////
//S → diagram DIAGRAM_TYPE diagram_name { DIAGRAM_CONTENT }
void s() :  {}
{
	model()
//|	layout()
}

////////////////////////////////////////////////////////////////
//DIAGRAM_CONTENT → PACKAGE_DEFINITIONS
//DIAGRAM_CONTENT → CLASS_DEFINITIONS
//enable to skip package definition for 1 package diagram
//force the diagram to have at leas one package or one classes
void model() :  {}
{
	(class_definition())+ 
|	(package_definition())+
}




///////////////////////////////////////////////////////////////////
//PACKAGE_DEFINITION → package package_name { CLASS_DEFINITIONS }
void package_definition():{}{
	<PACKAGE> package_name() "{" (class_definition())+ "}"
}
void package_name():{}{
	<VARIABLE>
}


///////////////////
//COMMENT → comment
void comment():{}{
	<COMMENT>
}



///////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASS_DEFINITION → OPTIONAL_COMMENT VISIBILITY CLASS_TYPE class_name { RELATIONS ATTRIBUTES METHODS }
void class_definition():{}{
	(comment())? (visibility())? <CLASS_TYPE> class_name() "{" (relations())? (attributes())? (methods())? "}"
}
void class_name():{}{
	<VARIABLE>
}



/////////////////////////////////////////////////
//RELATIONS → relations { RELATION_DEFINITIONS }
void relations():{}{
	<RELATIONS> "{" (relation())+ "}"
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//RELATION_DEFINITION → OPTIONAL_COMMENT RELATION_TYPE class_name RELATION_CARDINALITY CLASS_LIST_WITH_CARDINALITY
void relation():{}{
	(comment())? <RELATION_TYPE> class_name() (relation_cardinality())? ("," class_name() (relation_cardinality())? )* ";"
}




////////////////////////////////////////////////////////////////
//RELATION_CARDINALITY → ε
//RELATION_CARDINALITY → (CARDINALITY, CARDINALITY, CARDINALITY)
void relation_cardinality():{}{
	"(" (cardinality())? "," (cardinality())? "," (cardinality())? ")"
}

//////////////////////
//CARDINALITY → string
//CARDINALITY → ε
void cardinality():{}{
	<STRING>
}

////////////////////////////////////
//ATTRIBUTES → ATTRIBUTE_DEFINITIONS
//ATTRIBUTES → ε
void attributes():{}{
	<ATTRIBUTES> "{" (attribute())+ "}"
}



////////////////////////////////////////////////////////////////////////////
//ATTRIBUTE → COMMENT VISIBILITY ATTRIBUTE_TYPE attribute_name DEFAULT_VALUE
void attribute():{}{
	(comment())? 
	(visibility())? 
	(typed_attribute_name() | attribute_name() )
	(default_value())? ";"
}
void attribute_name():{}{
	<VARIABLE>
}

void typed_attribute_name():{}{
	<VARIABLE> <VARIABLE>
}

/////////////////////////
//DEFAULT_VALUE → ε
//DEFAULT_VALUE → EQUAL_TO
void default_value():{}{	
	<EQUAL> equal_to()
}




/////////////////////////
//EQUAL_TO →  value
void equal_to():{}{
	<NUMBER>
| 	<STRING>
}



//////////////////////////
//METHODS → METHOD_DEFINITION
//METHODS → ε
void methods():{}{
	<METHOD> "{" (method())+ "}" 
}




/////////////////////////////////////////////////////////////////////
//METHOD → OPTIONAL_COMMENT VISIBILITY METHOD_TYPE method_name { METHOD_ARGS }
//METHOD_TYPE → TYPE
void method():{}{
	(comment())? 
	(visibility())? 
	(typed_method() | method_name())
	"(" (method_arg() ("," method_arg())* )? ")" ";"
}

void typed_method():{}{
	<VARIABLE> <VARIABLE>
}

void method_name():{}{
	<VARIABLE> 
}

//////////////////////////////////////////////////////
//METHOD_ARG → COMMENT ARG_TYPE arg_name DEFAULT_VALUE
//ARG_TYPE → TYPE
void method_arg():{}{
	(comment())? 
	(typed_arg() | arg_name())
	(default_value())?
}
void arg_name():{}{
	<VARIABLE>
}

void typed_arg():{}{
	<VARIABLE> <VARIABLE>
}



///////////////////////
//ATTRIBUTE_TYPE → TYPE
void attribute_type():{}{
	type()
}


///////////////
//TYPE → string
//TYPE → ε 
void type ():{}
{
	<VARIABLE> 
}

//////////////////////
//VISIBILITY → private
//VISIBILITY → public
//VISIBILITY → string
//VISIBILITY → ε 
void visibility ():{}
{
	<VISIBILITY>
}




