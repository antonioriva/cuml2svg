/**
 * JavaCC file
 */


options {
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(cuml2svg)
package org.cuml2svg.compiler;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
public class cuml2svg {
  public static void main(String args[]) throws ParseException {
      try {
    	 cuml2svg parser = new cuml2svg(new FileInputStream("doc/sorgenti_test/composite.u2s"));
    	parser.s();
        
      } catch (FileNotFoundException e1) {
    		e1.printStackTrace();
    }catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
      } 
      catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
  
}
}
PARSER_END(cuml2svg)

SKIP : {
 	" "
|	"\r"
|	"\t"
|	"\n"
}








////////////////////////////////////////////////////////////////
//S → diagram DIAGRAM_TYPE diagram_name { PACKAGE_DEFINITIONS }
void s() :  {}
{
	<DIAGRAM> diagram_type() <DIAGRAM_NAME> "{" diagram_content() "}"
}

TOKEN:{
	<DIAGRAM: "diagram">
}

////////////////////////////////////////////////////////////////
//DIAGRAM_CONTENT → PACKAGE_DEFINITIONS
//DIAGRAM_CONTENT → CLASS_DEFINITIONS
//enable to skip package definition for 1 package diagram
//force the diagram to have at leas one package or one classes
void diagram_content() :  {}
{
	class_definition() class_definitions()
|	package_definition() package_definitions()
}

////////////////////
//DIAGRAM_TYPE → uml
void diagram_type(): {}
{
	<DIAGRAM_TYPE>
}

TOKEN:{
	<DIAGRAM_TYPE: "uml">
//|	<DIAGRAM_TYPE: "petrinet">
}

////////////////////////////////////////////////////////////////
//PACKAGE_DEFINITIONS → PACKAGE_DEFINITION PACKAGE_DEFINITIONS
//PACKAGE_DEFINITIONS → ε
void package_definitions():{}{
	package_definition()  package_definitions()
|	{}
}

///////////////////////////////////////////////////////////////////
//PACKAGE_DEFINITION → package package_name { CLASS_DEFINITIONS }
void package_definition():{}{
	<PACKAGE> package_name() "{" class_definitions() "}"
}
void package_name():{}{
	<VARIABLE>
}
TOKEN:{
	<PACKAGE: "package">
}


////////////////////////////
//OPTIONAL_COMMENT → ε
//OPTIONAL_COMMENT → COMMENT
void optional_comment():{}{
	comment()
|	{}
}

///////////////////
//COMMENT → comment
void comment():{}{
	<COMMENT>
}

TOKEN:{
	<COMMENT: "//"(~["\n"])*
|			 "#"(~["\n"])*
|			"/*"(~[])*"*/"
>
}

////////////////////////////////////////////////////////////
//CLASS_DEFINITIONS → CLASS_DEFINITION CLASS_DEFINITIONS
//CLASS_DEFINITIONS → ε
void class_definitions():{}{
	class_definition()  class_definitions() 
|	{}
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASS_DEFINITION → OPTIONAL_COMMENT VISIBILITY CLASS_TYPE class_name { RELATIONS ATTRIBUTES METHODS }
void class_definition():{}{
	optional_comment() visibility() class_type() class_name() "{" relations() attributes() methods() "}"
}
void class_name():{}{
	<VARIABLE>
}

/////////////////////////////////////////////////
//RELATIONS → relations { RELATION_DEFINITIONS }
void relations():{}{
	<RELATIONS> "{" relation_definitions() "}"
|	{}
}

TOKEN:{
	<RELATIONS: "relations">
}

///////////////////////////////////////////////////////////////////
//RELATIONS_DEFINITIONS → RELATION_DEFINITION RELATION_DEFINITIONS
//RELATIONS_DEFINITIONS → ε
void relation_definitions():{}{
	relation_definition() relation_definitions() ";"
|	{}
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//RELATION_DEFINITION → OPTIONAL_COMMENT RELATION_TYPE class_name RELATION_CARDINALITY CLASS_LIST_WITH_CARDINALITY
void relation_definition():{}{
	optional_comment() relation_type() class_name() relation_cardinality() class_list_with_cardinality()
}

///////////////////////////
//RELATION_TYPE → use
//RELATION_TYPE → extend
//RELATION_TYPE → associate
//RELATION_TYPE → include
//RELATION_TYPE → composed
//RELATION_TYPE → realize
//RELATION_TYPE → depend
void relation_type(): {}
{
	<RELATION_TYPE>
}

TOKEN:{
	<RELATION_TYPE: "use" 
| "extend"
| "associate"
| "include"
| "composed"
| "realize"
| "depend" >
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//CLASS_LIST_WITH_CARDINALITY → , class_name RELATION_CARDINALITY CLASS_LIST_WITH_CARDINALITY
//CLASS_LIST_WITH_CARDINALITY → ε
void class_list_with_cardinality():{}{
	"," class_name() relation_cardinality() class_list_with_cardinality()
|	{}
}



////////////////////////////////////////////////////////////////
//RELATION_CARDINALITY → ε
//RELATION_CARDINALITY → (CARDINALITY, CARDINALITY, CARDINALITY)
void relation_cardinality():{}{
	"(" cardinality() "," cardinality() "," cardinality() ")"
|	{}
}

//////////////////////
//CARDINALITY → string
//CARDINALITY → ε
void cardinality():{}{
	<STRING>
|	{}
}

///////////////////////////////////
//ATTRIBUTES → ATTRIBUTE ATTRIBUTES
//ATTRIBUTES → ε
void attributes():{}{
	attribute()	attributes()
|	{}
}

////////////////////////////////////////////////////////////////////////////
//ATTRIBUTE → COMMENT VISIBILITY ATTRIBUTE_TYPE attribute_name DEFAULT_VALUE
void attribute():{}{
	comment() visibility() attribute_type() attribute_name() default_value()
}
void attribute_name():{}{
	<VARIABLE>
}

/////////////////////////
//DEFAULT_VALUE → ε
//DEFAULT_VALUE → EQUAL_TO
void default_value():{}{	
	<EQUAL> equal_to()
|	{}
}

TOKEN:{
	<EQUAL:"=">
}


/////////////////////////
//EQUAL_TO →  value
void equal_to():{}{
	<NUMBER>
| 	<STRING>
}



//////////////////////////
//METHODS → METHOD METHODS
//METHODS → ε
void methods():{}{
	method() methods()
|	{}
}


/////////////////////////////////////////////////////////////////////
//METHOD → COMMENT VISIBILITY METHOD_TYPE method_name { METHOD_ARGS }
void method():{}{
	optional_comment() visibility() method_type() method_name() "(" method_args() ")"
}
void method_name():{}{
	<VARIABLE>
}

////////////////////////////////////////////////
//METHOD_ARGS → METHOD_ARG METHOD_ARGS_ITERATION
//void method_args():{}{
//	method_arg() mathod_args_iteration()
//}

////////////////////////////////////////////////
//METHOD_ARGS → METHOD_ARG METHOD_ARGS
//METHOD_ARGS → ε 
void method_args():{}{
	method_arg() method_args()
|	{}
}

////////////////////////////////////////////////////////////
//METHOD_ARGS_ITERATION → , METHOD_ARG METHOD_ARGS_ITERATION
//METHOD_ARGS_ITERATION → ε 
void mathod_args_iteration():{}{
	method_arg() mathod_args_iteration()
|	{}
}

//////////////////////////////////////////////////////
//METHOD_ARG → COMMENT ARG_TYPE arg_name DEFAULT_VALUE
void method_arg():{}{
	optional_comment() arg_type() arg_name() default_value()
}
void arg_name():{}{
	<VARIABLE>
}


/////////////////////////
//CLASS_TYPE → interface
//CLASS_TYPE → class
void class_type():{}{
	<CLASS_TYPE>
}

TOKEN:{
	<CLASS_TYPE: "interface" | "class">
}

////////////////////
//METHOD_TYPE → TYPE
void method_type():{}{
	type()
}

//ARG_TYPE → TYPE
void arg_type():{}{
	type()
}

///////////////////////
//ATTRIBUTE_TYPE → TYPE
void attribute_type():{}{
	type()
}


///////////////
//TYPE → string
//TYPE → ε 
void type ():{}
{
	<STRING> | {}
}

//////////////////////
//VISIBILITY → private
//VISIBILITY → public
//VISIBILITY → string
//VISIBILITY → ε 
void visibility ():{}
{
	<VISIBILITY> | {}
}

TOKEN:{
	<VISIBILITY: "private" | "public" | "protected">
}


//################################################################

///////////////
// NUMBER token
TOKEN : {
    < NUMBER: ( <DIGIT> )+ >
|   < #DIGIT: ["0" - "9"] >
}

////////////////
// VARIABLE token
TOKEN:{
	<VARIABLE: (["a"-"z" , "A"-"Z" ])( ["0" - "9", "a"-"z" , "A" - "Z" , "_"] )+>
}

TOKEN:{
	<DIAGRAM_NAME: <STRING> >
}



///////////////
// STRING token
TOKEN :{
	<STRING: "\""(~["\""])*"\"">
}



